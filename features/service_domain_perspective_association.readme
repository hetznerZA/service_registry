This service registry specification supports the Hetzner minimal viable SOA architecture. This architecture takes the view that Hetzner prefers to deploy services on web applications, described by WADL. As such, services have definitions as WADL resources and live on service components to which a collection of such resources have been deployed. Service components are owned by teams. Services are also owned by teams- the business key of a service/service component is set to that of the team responsible for the service. Service components are modeled as a specific type of service, namely IAAS.

Services can be associated with one or more functional views on Hetzner systems, called 'domain perspectives'. A functional domain perspective can be associated with multiple services. A service can be associated with multiple domain perspectives. Since domain perspectives are a form of SOA virtual service, this supports aspects of a higher maturity SOA paradigm within the constraints of a miminal architecture, in line with the company's fledgling experience in SOA (see implementation below.) An operational domain perspective can be associated with multiple service components. A service component can only be associated with one operational domain perspective.

The association of services to service components take place in the registry and via the mechanics of web application deployment. Tying the services to web applications strongly via WADL here by design is meant to reflect this minimal approach. Using WADL also allows Hetzner to effect services using HTTP(S) and REST, historically technologies we have more experience with.

The cost of provisioning fully mature services is that NFRs such as security and access should be encoded in policies and attached to the services. The cost of getting this right at Hetzner at the moment is deemed prohibitive and too big a leap for the team. Instead policies are attached to domain perspectives that model service component deployment and operational strategies.

The smaller step implemented in this specification should allow Hetzner to succeed at SOA, and mature to the point of adopting a more comprehensive services model. Policies and NFRs can be associated with operational domain perspectives and service components, and the associated governance rests with the teams assigned to the service components.

In future, when Hetzner is ready for virtualized services and OSIMM maturity levels 6 and 7, this decision can be changed. At that point, services should be represented by WSDL definitions and deployed to a cloud of dynamic service components. The concept of domain perspectives then facilitates a more abstract ownership relationship, decoupled from service components.

As an even further step to SOA maturity, virtual services and business workflows can be defined, fully expressing the value and intent behind domain perspective. I.e. such virtual services fully describe the domain perspectives, which can then be done away with.

In the interim the minimal modelling how-ever allows Hetzner to identify and define domain perspectives, without the need to build virtual services. This is important, as the domain perspectives can be discovered, and Hetzner can change its mind about them in configuration space (re-deploying services to other service components, and associating services to other domain perspectives,) without paying the much higher cost associated with developing/changing virtual services.

Implementation in juddi has service components registered as services. These service components are associated with teams (mapped in juddi as businesses, the entity intended for companies and their departments.) Services are also associated in juddi with businesses. Services are associated with service components through a URI in the service bindings. The service component's lexicon and status URIs are tied to the service component as its only bindings. Service components can belong to only one team. Services can belong to only one team. Services can be associated with multiple service components through bindings. Services are labelled with domain perspectives as plain-text descriptions. Domain perspectives are also implemented as juddi business entities. This allows ownership there-of to be assigned to individuals or groups who care about the domain perspective, whether it be functional or operational. Policies are governed by the team owning the domain perspective.

Along with maturity to WSDL, we should then consider messaging queues and ESB protocols instead of HTTP.
