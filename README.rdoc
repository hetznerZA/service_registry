= Servicy registry

== Features

The service registry provides a variety of features supporting domain and service modelling, discovery and support.

=== decision support system
* {file:features/dss.feature decision support} when mapping services

=== domain perspectives
* {file:features/list_domain_perspectives.feature listing domain perspectives} when provisioning domain perspectives and service components
* {file:features/register_domain_perspective.feature registering domain perspectives} when new domain perspectives become relevant
* {file:features/deregister_domain_perspective.feature deregistering domain perspectives} when domain perspectives become irrelevant

=== service components
* {file:features/listing_service_components.feature listing service components} when provisioning service components and mapping service components to domain perspectives
* {file:features/register_service_component.feature registering service components} when new service components are added
* {file:features/deregister_service_component.feature deregistering service components} when service components should no longer be accessible
* {file:features/service_component_uri.feature configuring service component URI} when enabling location of service components

=== services
* {file:features/register_service.feature registering services} when provisioning services
* {file:features/deregister_service.feature deregistering services} when provisioning services

=== service definitions
* {file:features/register_service_definition.feature registering definitions for services} when provisioning services
* {file:features/register_service_definition.feature updating service definitions} when provisioning services
* {file:features/deregister_service_definition.feature deregistering service definitions} when provisioning services
* {file:features/service_definition.feature obtaining a service definition} given a service identifier

=== accociations
* {file:features/associate_service_component_with_domain_perspective.feature associating service components with domain perspectives} when modelling the domain.
* {file:features/associate_service_component_with_domain_perspective.feature changing domain perspective associations} when modelling the domain.
* {file:features/remove_service_component_domain_perspective_association.feature removing domain perspective associations} when modelling the domain.
* {file:features/associate_service_component_with_service.feature associating service components with services} when provisioning services.
* {file:features/associate_service_component_with_service.feature changing service associations} when provisioning services.
* {file:features/remove_service_component_service_association.feature removing service associations} when provisioning services.

=== services

* {file:features/service_search.feature finding a list of services in a domain perspectives} when exploring a domain perspective
* {file:features/service_search.feature finding a list of services  matching service search criteria} when exploring services
* {file:features/service_service_components.feature querying service status} when deciding which service from a pool of candidate services are best to use
* {file:features/service_service_components.feature finding a URI} for accessing the service on a service component

== Requirements

The service requires:
* {file:features/bootstrap_with_configuration_service.feature bootstrapping with a configuration service}
* {file:features/bootstrap_with_identifier.feature bootstrapping with a globally unique identifier}

== Configuration

The service supports:
* {file:features/bootstrap_with_configuration_service.feature configuration} of the registry using a configuration service.

== Dependencies

The service registry depends on:
* {file:features/configure_with_directory.feature a directory configuration} for UDDI and inetOrgPerson support
* {file:features/discover_domain_perspectives.feature discovery of domain perspectives}
* {file:features/discover_service_components.feature discovery of service components} using a UDDI directory.

== Service definitions and service components

To find a list of service definitions given a service component, one would have to ask the service registry for all services on the service component first, and then for the definitions of each. The SOAR architecture offers a /lexicon end-point on all SOAR web applications that returns the desired aggregate. This aggregate is not a core feature of the service registry.

A pluggable Ruby API is provided in {ServiceRegistry::Base}.

The declarative specification of the service is implemented with cucumber, using pluggable imperative orchestration providers.
This allows for implementations that are not providers to the Ruby API.
See {ServiceRegistry::Test}.

A stub service provider is provided in {ServiceRegistry::Provider::Stub}.
This is used to validate the test framework architecture, and may be used as a stub configuration service in tests.
{https://rubygems.org/search?query=service_registry-provider Other providers} are available as gems.

Service providers are registered against the {ServiceRegistry::ProviderRegistry}.

Factories for creating and configuring service instances are provided in {ServiceRegistry::Factory}.

== Usage

The recommended approach to creating a service registry client is to use a Factory

For example, we can use the EnvironmentContext factory to create and configure
a configuration service client backed by the vault provider as below.

We could also use a ConfigurationContext factory to retrieve service registry details from a configuration service.

Our +main.rb+ is simple:

  require 'bundler'
  Bundler.require(:default)

  registry = ServiceRegistry::Factory::EnvironmentContext.create
  billing_scs, base_url = registry.find_service_component_by_domain_perspective("billing")

This relies on a bundler Gemfile to load the gem that contains whatever
service provider we configure in the environment:

  source 'https://rubygems.org'

  gem 'service_registry-provider-juddi'
  gem 'acme_application'

Now we use the process environment to configure the EnvironmentContext factory:

  SERVICE_REGISTRY_IDENTIFIER="acme" \
  SERVICE_REGISTRY_TOKEN="0b2a80f4-54ce-45f4-8267-f6558fee64af" \
  SERVICE_REGISTRY_PROVIDER="juddi" \
  SERVICE_REGISTRY_PROVIDER_ADDRESS="http://127.0.0.1:8009" \
  bundle exec main.rb

Note that +main.rb+ is completely decoupled from the selection of provider and
provider configuration. We could swap and/or reconfigure the provider by
manipulating only the Gemfile and the environment.




