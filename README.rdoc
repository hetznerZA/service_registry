= Servicy registry

== Features

The service registry provides a variety of features supporting domain and service modelling, discovery and support. For a discussion on the model adopted (minimal SOA architectural without full-blown virtual services, but with domain perspectives as functional view implementations in minimal infrastructural virtual services (web applications)) {file:features/service_domain_perspective_association.readme see here.}

=== decision support system
* {file:features/dss.feature decision support} when mapping services

=== domain perspectives
* {file:features/list_domain_perspectives.feature listing domain perspectives} when provisioning domain perspectives and service components
* {file:features/register_domain_perspective.feature registering domain perspectives} when new domain perspectives become relevant
* {file:features/deregister_domain_perspective.feature deregistering domain perspectives} when domain perspectives become irrelevant

=== teams
* {file:features/list_domain_perspectives.feature listing teams} when needing teams to model ownership in the domain
* {file:features/register_domain_perspective.feature registering teams} new teams become relevant
* {file:features/deregister_domain_perspective.feature deregistering teams} when teams become irrelevant
* {file:features/teams.feature teams} are thought of as domain perspectives when modelling them

=== contacts
* {file:features/add_contacts.feature adding contacts} when interested in accountability, responsibility and ownership
* {file:features/add_contacts.feature changing contacts} when interested in accountability, responsibility and ownership
* {file:features/remove_contacts.feature removing contacts} when interested in accountability, responsibility and ownership
* {file:features/find_contacts.feature finding contacts} when interested in accountability, responsibility and ownership

=== service components
* {file:features/listing_service_components.feature listing service components} when provisioning service components and mapping service components to domain perspectives
* {file:features/register_service_component.feature registering service components} when new service components are added
* {file:features/deregister_service_component.feature deregistering service components} when service components should no longer be accessible
* {file:features/service_component_uri.feature configuring service component URI} when enabling location of service components

=== services
* {file:features/register_service.feature registering services} when provisioning services
* {file:features/deregister_service.feature deregistering services} when provisioning services
* {file:features/configure_service_meta.feature configuring service meta} when provisioning services

=== service definitions
* {file:features/register_service_definition.feature registering definitions for services} when provisioning services
* {file:features/register_service_definition.feature updating service definitions} when provisioning services
* {file:features/deregister_service_definition.feature deregistering service definitions} when provisioning services
* {file:features/service_definition.feature obtaining a service definition} given a service identifier

=== associations
* {file:features/associate_service_component_with_domain_perspective.feature associating service components with domain perspectives} when modelling the domain.
* {file:features/associate_service_component_with_domain_perspective.feature changing domain perspective service component associations} when modelling the domain.
* {file:features/remove_service_component_domain_perspective_association.feature removing domain perspective service component associations} when modelling the domain.
* {file:features/associate_service_with_domain_perspective.feature associating services with domain perspectives} when modelling the domain.
* {file:features/associate_service_with_domain_perspective.feature changing domain perspective service associations} when modelling the domain.
* {file:features/remove_service_domain_perspective_association.feature removing domain perspective service associations} when modelling the domain.
* {file:features/service_endpoints.feature adding service access points} when provisioning serviceses
* {file:features/list_service_endpoints.feature listing services access points} when using services.
* {file:features/remove_service_endpoints.feature removing service access points} when provisioning services

=== search and filters

* {file:features/service_search.feature finding a list of services in a domain perspectives} when exploring a domain perspective
* {file:features/service_search.feature finding a list of service components in a domain perspectives} when exploring provisining of a domain perspective
* {file:features/service_search.feature finding a list of services  matching service search criteria} when exploring services
* {file:features/service_service_components.feature querying service status} when deciding which service from a pool of candidate services are best to use
* {file:features/service_service_components.feature finding a URI} for accessing the service on a service component

== Requirements

The service requires:
* {file:features/bootstrap_with_configuration_service.feature bootstrapping with a configuration service}
* {file:features/bootstrap_with_identifier.feature bootstrapping with a globally unique identifier}

== Configuration

The service supports:
* {file:features/bootstrap_with_configuration_service.feature configuration} of the registry using a configuration service.

== Dependencies

The service registry depends on:
* A directory for UDDI and inetOrgPerson support

== Service definitions and service components

To find a list of service definitions given a service component, one would have to ask the service registry for all services on the service component first, and then for the definitions of each. The SOAR architecture offers a /lexicon end-point on all SOAR web applications that returns the desired aggregate. This aggregate is not a core feature of the service registry.

== Usage

=== Setting up a local juddi instance
* {file:tfa/README TFA instructions}

=== soar_sr gem implementation
    spec.add_development_dependency 'soar_sr'

    bundle exec irb

==== Helpers
    require 'soar_sr'
    credentials = { 'username' => 'uddi', 'password' => 'uddi' }
    freshness = 0 # > 0 to enable cache
    @soar_sr = SoarSr::ServiceRegistry.new('http://localhost:8080', 'hetzner.co.za', 'hetzner', credentials, freshness)
    ds = @soar_sr.domain_perspectives
    sv = @soar_sr.services
    sc = @soar_sr.service_components
    sd = @soar_sr.service_definitions
    ts = @soar_sr.teams
    as = @soar_sr.associations
    ss = @soar_sr.search

==== Domain perspectives
    ds.delete_all_domain_perspectives
    ds.list_domain_perspectives
    ds.domain_perspective_by_name('domains', 'my domain')
    ds.domain_perspective_registered?('my domain')
    ds.register_domain_perspective('my domain')
    ds.domain_perspective_registered?('my domain')
    ds.deregister_domain_perspective('my domain')
    ds.list_domain_perspectives

==== Services
    sv.register_service({'name' => 'my service', 'description' => 'a new service', 'definition' => 'http://de.finiti.on'})
    sv.service_registered?('my service')
    sv.add_service_uri('my service', 'http://one-uri.com/my_service')
    sv.add_service_uri('my service', 'http://find-me-here.com/my_service')
    sv.remove_uri_from_service('my service', 'http://one-uri.com/my_service')
    sv.service_uris('my service')
    sv.configure_meta_for_service('my service', {'some' => 'meta'})
    sv.meta_for_service('my service')
    sv.service_by_name('my service')
    sv.deregister_service('my service')
    sv.service_by_name('my service')

==== Service components
    sc.delete_all_service_components
    sc.list_service_components
    sc.register_service_component('my sc')
    sc.service_component_registered?('my sc')
    sc.configure_service_component_uri('my sc', 'http://my-sc.com')
    sc.service_component_uri('my sc')
    sc.deregister_service_component('my sc')
    sc.service_component_registered?('my sc')

==== Service definitions
    sv.register_service({'name' => 'my service', 'description' => 'a new service', 'definition' => 'http://de.finiti.on'})
    sd.service_definition_for_service('my service')
    sd.deregister_service_definition('my service')
    sd.service_definition_for_service('my service')
    sd.register_service_definition('my service', 'http://github.com/myservice/def.wadl')
    sd.service_definition_for_service('my service')

==== Teams
    ts.team_registered?('my team')
    ts.register_team('my team')
    ds.domain_perspective_by_name('teams', 'my team')
    ts.team_registered?('my team')
    ts.deregister_team('my team')
    ts.team_registered?('my team')

==== Associations
    ds.register_domain_perspective('my domain')
    as.delete_all_domain_perspective_associations('my domain')
    sc.register_service_component('my sc')
    as.associate_service_component_with_domain_perspective('my sc', 'my domain')
    as.service_component_has_domain_perspective_associations?('my sc')
    as.domain_perspective_associations('my domain')
    as.domain_perspective_has_associations?('my domain')
    as.disassociate_service_component_from_domain_perspective('my domain', 'my sc')
    as.service_component_has_domain_perspective_associations?('my sc')
    as.domain_perspective_has_associations?('my domain')

    ds.register_domain_perspective('my domain')
    as.delete_all_domain_perspective_associations('my domain')
    sv.register_service({'name' => 'my service', 'description' => 'a new service', 'definition' => 'http://de.finiti.on'})
    as.associate_service_with_domain_perspective('my service', 'my domain')
    as.domain_perspective_has_associations?('my domain')
    as.domain_perspective_associations('my domain')
    as.disassociate_service_from_domain_perspective('my domain', 'my service')
    as.domain_perspective_associations('my domain')

==== Search
    sv.register_service({'name' => 'search me', 'description' => 'pretty please', 'definition' => 'http://de.finiti.on'})
    sv.add_service_uri('search me', 'https://this.is.another.one/ybo')
    sv.add_service_uri('search me', 'http://some.where.net/smoothies')
    sv.service_uris('search me')
    sv.remove_uri_from_service('search me', 'https://this.is.another.one/ybo')
    ss.search_for_service('search')
    ss.search_for_service('please')
    ss.search_for_service('ti.on')
    ds.register_domain_perspective('my domain')
    as.associate_service_with_domain_perspective('search me', 'my domain')
    ss.search_domain_perspective('my domain', 'search')
    ss.search_domain_perspective('my domain', 'please')
    ss.search_domain_perspective('my domain', 'ti.on')
    ss.search_for_service_by_name('search')
    ss.search_for_service_by_name('please')
    ss.search_for_service_by_name('ti.on')
