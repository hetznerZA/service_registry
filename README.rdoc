= Servicy registry

== Features

The service registry provides a variety of features supporting domain and service modelling, discovery and support.

=== decision support system
* {decision support}[file:features/dss_feature.html] when mapping services

=== domain perspectives
* {listing domain perspectives}[file:features/list_domain_perspectives_feature.html] when provisioning domain perspectives and service components
* {registering domain perspectives}[file:features/register_domain_perspective_feature.html] when new domain perspectives become relevant
* {deregistering domain perspectives}[file:features/deregister_domain_perspective_feature.html] when domain perspectives become irrelevant

=== service components
* {listing service components}[file:features/listing_service_components_feature.html] when provisioning service components and mapping service components to domain perspectives
* {registering service components}[file:features/register_service_component_feature.html] when new service components are added
* {deregistering service components}[file:features/deregister_service_component_feature.html] when service components should no longer be accessible
* {configuring service component URI}[file:features/service_component_uri_feature.html] when enabling location of service components

=== service definitions
* {registering services with their definition}[file:features/register_service_feature.html] when provisioning services
* {updating service definitions}[file:features/register_service_feature.html] when provisioning services
* {deregistering service definitions}[file:features/deregister_service_definition_feature.html] when provisioning services
* {obtaining a service definition}[file:features/service_definition_feature.html] given a service identifier

=== accociations
* {associating service components with domain perspectives}[file:features/associate_service_component_with_domain_perspective_feature.html] when modelling the domain.
* {changing domain perspective associations}[file:features/associate_service_component_with_domain_perspective_feature.html] when modelling the domain.
* {removing domain perspective associations}[file:features/remove_service_component_domain_perspective_association_feature.html] when modelling the domain.
* {associating service components with services}[file:features/associate_service_component_with_service_feature.html] when provisioning services.
* {changing service associations}[file:features/associate_service_component_with_service_feature.html] when provisioning services.
* {removing service associations}[file:features/remove_service_component_service_association_feature.html] when provisioning services.

=== services

* {finding a list of services in a domain perspectives}[file:features/service_search_feature.html] when exploring a domain perspective
* {finding a list of services given a service component}[file:features/service_definitions_given_service_component_feature.html] when exploring service components
* {finding a list of services  matching service search criteria}[file:features/service_search_feature.html] when exploring services
* {querying service status}[file:features/service_service_components_feature.html] when deciding which service from a pool of candidate services are best to use
* {finding a URI}[file:features/service_service_components_feature.html] for accessing the service on a service component

== Requirements

The service requires:
* {bootstrapping with a configuration service}[file:features/bootstrap_with_configuration_service_feature.html]
* {bootstrapping with a globally unique identifier}[file:features/bootstrap_with_identifier_feature.html]

== Configuration

The service supports:
* {configuration}[file:features/configuration_feature.html] of the registry.

== Dependencies

The service registry depends on:
* {a directory configuration}[file:features/configure_with_directory_feature.html] for UDDI and inetOrgPerson support
* {discovery of domain perspectives}[file:features/discover_domain_perspectives_feature.html]
* {discovery of service components}[file:features/discover_service_components_feature.html] using a UDDI directory.

A pluggable Ruby API is provided in {ServiceRegistry::Base}.

The declarative specification of the service is implemented with cucumber, using pluggable imperative orchestration providers.
This allows for implementations that are not providers to the Ruby API.
See {ServiceRegistry::Test}.

A stub service provider is provided in {ServiceRegistry::Provider::Stub}.
This is used to validate the test framework architecture, and may be used as a stub configuration service in tests.
{https://rubygems.org/search?query=service_registry-provider Other providers} are available as gems.

Service providers are registered against the {ServiceRegistry::ProviderRegistry}.

Factories for creating and configuring service instances are provided in {ServiceRegistry::Factory}.

== Usage

The recommended approach to creating a service registry client is to use a Factory

For example, we can use the EnvironmentContext factory to create and configure
a configuration service client backed by the vault provider as below.

We could also use a ConfigurationContext factory to retrieve service registry details from a configuration service.

Our +main.rb+ is simple:

  require 'bundler'
  Bundler.require(:default)

  registry = ServiceRegistry::Factory::EnvironmentContext.create
  billing_scs, base_url = registry.find_service_component_by_domain_perspective("billing")

This relies on a bundler Gemfile to load the gem that contains whatever
service provider we configure in the environment:

  source 'https://rubygems.org'

  gem 'service_registry-provider-juddi'
  gem 'acme_application'

Now we use the process environment to configure the EnvironmentContext factory:

  SERVICE_REGISTRY_IDENTIFIER="acme" \
  SERVICE_REGISTRY_TOKEN="0b2a80f4-54ce-45f4-8267-f6558fee64af" \
  SERVICE_REGISTRY_PROVIDER="juddi" \
  SERVICE_REGISTRY_PROVIDER_ADDRESS="http://127.0.0.1:8009" \
  bundle exec main.rb

Note that +main.rb+ is completely decoupled from the selection of provider and
provider configuration. We could swap and/or reconfigure the provider by
manipulating only the Gemfile and the environment.




