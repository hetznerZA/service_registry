= Servicy registry

== Features

The service registry provides a variety of features supporting domain and service modelling, discovery and support. For a discussion on the model adopted (minimal SOA architectural without full-blown virtual services, but with domain perspectives as functional view implementations in minimal infrastructural virtual services (web applications)) {file:features/service_domain_perspective_association.readme see here.}

=== Non-functional requirements

* {file:features/nfr.feature name standardization} when expressing non-functional requirements

=== domain perspectives
* {file:features/list_domain_perspectives.feature listing domain perspectives} when provisioning domain perspectives and service components
* {file:features/register_domain_perspective.feature registering domain perspectives} when new domain perspectives become relevant
* {file:features/deregister_domain_perspective.feature deregistering domain perspectives} when domain perspectives become irrelevant

=== teams
* {file:features/list_domain_perspectives.feature listing teams} when needing teams to model ownership in the domain
* {file:features/register_domain_perspective.feature registering teams} new teams become relevant
* {file:features/deregister_domain_perspective.feature deregistering teams} when teams become irrelevant
* {file:features/teams.feature teams} are thought of as domain perspectives when modelling them

=== contacts
* {file:features/add_contacts.feature adding contacts} when interested in accountability, responsibility and ownership
* {file:features/add_contacts.feature changing contacts} when interested in accountability, responsibility and ownership
* {file:features/remove_contacts.feature removing contacts} when interested in accountability, responsibility and ownership
* {file:features/find_contacts.feature finding contacts} when interested in accountability, responsibility and ownership

=== service components
* {file:features/listing_service_components.feature listing service components} when provisioning service components and mapping service components to domain perspectives
* {file:features/register_service_component.feature registering service components} when new service components are added
* {file:features/deregister_service_component.feature deregistering service components} when service components should no longer be accessible
* {file:features/service_component_uri.feature configuring service component URI} when enabling location of service components
* {file:features/configure_service_component_meta.feature configuring service component meta} when provisioning service components

=== services
* {file:features/register_service.feature registering services} when provisioning services
* {file:features/deregister_service.feature deregistering services} when provisioning services
* {file:features/configure_service_meta.feature configuring service meta} when provisioning services

=== service definitions
* {file:features/register_service_definition.feature registering definitions for services} when provisioning services
* {file:features/register_service_definition.feature updating service definitions} when provisioning services
* {file:features/deregister_service_definition.feature deregistering service definitions} when provisioning services
* {file:features/service_definition.feature obtaining a service definition} given a service identifier

=== associations
* {file:features/associate_service_component_with_domain_perspective.feature associating service components with domain perspectives} when modelling the domain.
* {file:features/associate_service_component_with_domain_perspective.feature changing domain perspective service component associations} when modelling the domain.
* {file:features/remove_service_component_domain_perspective_association.feature removing domain perspective service component associations} when modelling the domain.
* {file:features/associate_service_with_domain_perspective.feature associating services with domain perspectives} when modelling the domain.
* {file:features/associate_service_with_domain_perspective.feature changing domain perspective service associations} when modelling the domain.
* {file:features/remove_service_domain_perspective_association.feature removing domain perspective service associations} when modelling the domain.
* {file:features/service_endpoints.feature adding service access points} when provisioning serviceses
* {file:features/list_service_endpoints.feature listing services access points} when using services.
* {file:features/remove_service_endpoints.feature removing service access points} when provisioning services

=== search and filters

* {file:features/service_search.feature finding a list of services in a domain perspectives} when exploring a domain perspective
* {file:features/service_search.feature finding a list of service components in a domain perspectives} when exploring provisining of a domain perspective
* {file:features/service_search.feature finding a list of services  matching service search criteria} when exploring services
* {file:features/service_service_components.feature finding a URI} for accessing the service on a service component

== Requirements

The service requires:
* {file:features/bootstrap_with_configuration_service.feature bootstrapping with a configuration service}
* {file:features/bootstrap_with_identifier.feature bootstrapping with a globally unique identifier}

== Configuration

The service supports:
* {file:features/bootstrap_with_configuration_service.feature configuration} of the registry using a configuration service.

== Dependencies

The service registry depends on:
* A directory for UDDI and inetOrgPerson support

== Service definitions and service components

To find a list of service definitions given a service component, one would have to ask the service registry for all services on the service component first, and then for the definitions of each. The SOAR architecture offers a /lexicon end-point on all SOAR web applications that returns the desired aggregate. This aggregate is not a core feature of the service registry.

== Usage

The soar_sr gem can be included in ruby applications or frameworks to provide access to a UDDI registry
Expressed here are common workflows when engaging the service registry. For detailed usage of the soar_sr UDDI client gem, please see http://http://www.rubydoc.info/gems/soar_sr

=== Setting up a local juddi instance
* {file:tfa/README TFA instructions}

=== Using the soar_sr UDDI client 
    spec.add_dependency 'soar_sr'

    bundle exec irb

==== Helpers
    require 'soar_sr'
    credentials = { 'username' => 'uddi', 'password' => 'get-me-from-the-configuration-service' } # http://www.rubydoc.info/gems/configuration_service
    freshness = 0 # > 0 to enable cache
    @soar_sr = SoarSr::ServiceRegistry.new('http://service-registry.auto-h.net:8080', 'hetzner.co.za', 'hetzner', credentials, freshness)
    ds = @soar_sr.domain_perspectives
    sv = @soar_sr.services
    sc = @soar_sr.service_components
    sd = @soar_sr.service_definitions
    ts = @soar_sr.teams
    cc = @soar_sr.contacts
    as = @soar_sr.associations
    ss = @soar_sr.search

=== Workflows

==== My team has a new suite of services deployed to service components to solve a business need (domain perspective)

First, ensure the team exists in the service registry:

  ts.register_team('my team')

Add a contact to the team:

  contact = { 'name' => 'Peter Umpkin', 'email' => 'p.umpkin@ppatch.com', 'description' => 'Director of operations', 'phone' => '0917872413'}
  cc.add_contact_to_domain_perspective('my team', contact)

Next, if it does not exist yet, register the domain perspective the services operate in:

  ds.register_domain_perspective('my domain perspective')

Add a contact to the domain perspective:
  contact = { 'name' => 'Bruce Atman', 'email' => 'b.atman@marvelling.com', 'description' => 'Head of sales'}
  cc.add_contact_to_domain_perspective('my domain perspective', contact)

For each service component:
  Add the service component:
    sc.register_service_component('my-service-component-1.cpt4.host-h.net')
    sc.configure_service_component_uri('my-service-component-1.cpt4.host-h.net', 'https://my-service-component-1.cpt4.host-h.net/')

  Associate the service component with the domain perspective:
     as.associate_service_component_with_domain_perspective('my-service-component-1.cpt4.host-h.net', 'my domain perspective')

  Set ownership for the service component to the team:
    as.associate_service_component_with_domain_perspective('my-service-component-1.cpt4.host-h.net', 'my team')

For each service in the domain perspective:
  Register the service:
    sv.register_service({'name' => 'my service', 'description' => 'a new service', 'definition' => 'http://de.finiti.on'})

  Add access points for the service:
    sv.add_service_uri('my service', 'http://one-uri.com/my_service')

  Associate the service with its domain perspective:
    as.associate_service_with_domain_perspective('my service', 'my domain perspective')

  Set ownership for the service to the team:
    as.associate_service_with_domain_perspective('my service', 'my team')

==== My team wants to add a service component with meta and associate it with a team

First, ensure the team exists in the service registry:

  ts.register_team('my team')

Add a contact to the team:

  contact = { 'name' => 'Peter Umpkin', 'email' => 'p.umpkin@ppatch.com', 'description' => 'Director of operations', 'phone' => '0917872413'}
  cc.add_contact_to_domain_perspective('my team', contact)

Add the service component:
  sc.register_service_component('my-service-component-1.cpt4.host-h.net')
  sc.configure_service_component_uri('my-service-component-1.cpt4.host-h.net', 'https://my-service-component-1.cpt4.host-h.net/')

Set ownership for the service component to the team:
  as.associate_service_component_with_domain_perspective('my-service-component-1.cpt4.host-h.net', 'my team')

Configure meta for the service component:
  First retrieve the existing meta if any:
    meta = sc.meta_for_service_component('my-service-component-1.cpt4.host-h.net')

  Then add meta to it
    meta['my-key'] = 'my-meta'
    sc.configure_meta_for_service_component('my service', meta)
